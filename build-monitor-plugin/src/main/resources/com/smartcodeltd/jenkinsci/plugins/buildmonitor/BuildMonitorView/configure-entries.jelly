<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define" xmlns:l="/lib/layout" xmlns:t="/lib/hudson" xmlns:f="/lib/form" xmlns:i="jelly:fmt">

  <!-- BEGIN cut'n'paste from https://github.com/jenkinsci/jenkins/blob/jenkins-1.532/core/src/main/resources/hudson/model/ListView/configure-entries.jelly -->
  <f:section title="${%Job Filters}">

    <f:entry title="${%Status Filter}" help="/help/view-config/statusFilter.html">
      <select name="statusFilter" class="setting-input">
        <f:option value="" selected="${it.statusFilter==null}">${%All selected jobs}</f:option>
        <f:option value="1" selected="${it.statusFilter==true}">${%Enabled jobs only}</f:option>
        <f:option value="2" selected="${it.statusFilter==false}">${%Disabled jobs only}</f:option>
      </select>
    </f:entry>

    <f:entry title="${%Recurse in subfolders}" field="recurse">
      <f:checkbox id="recurse"/>
    </f:entry>

    <f:entry title="${%Jobs}">
      <p>${h.getAllTopLevelItems(it.ownerItemGroup).class}</p>
      <div class="listview-jobs">
        <j:forEach var="job" items="${h.getAllTopLevelItems(it.ownerItemGroup)}">
          <j:invoke method="populateJobList" on="${it}">
            <j:arg type="hudson.model.Job" value="${job}"/>
          </j:invoke>
          <j:set var="spanClass" value=""/>
          <j:set var="spanStyle" value=""/>
          <j:if test="${job.parent!=it.ownerItemGroup}">
            <j:set var="spanClass" value="nested"/>
            <j:set var="spanStyle" value="${it.recurse?'':'display:none'}"/>
          </j:if>
          <span class="${spanClass}" style="${spanStyle}">
            <f:checkbox name="${job.getRelativeNameFromGroup(it.ownerItemGroup)}" checked="${it.jobNamesContains(job)}" title="${h.getRelativeDisplayNameFrom(job,it.ownerItemGroup)}" tooltip="${job.fullName}" json="true"/>
            <br/>
          </span>
        </j:forEach>
      </div>
    </f:entry>

    <f:optionalBlock name="regexfilter" title="${%Rename jobs with regex filter}">
      <j:invoke method="supplyJobs" on="${it}"/>
      <j:invoke method="descNicknameMap" on="${it}"/>
      <f:entry title="${%Replace}">
        <f:textbox name="regexFilterReplace"/>
      </f:entry>
      <f:entry title="${%with}">
        <f:textbox name="regexFilterWith"/>
      </f:entry>
      <f:validateButton title="Rename" method="addFilter" with="regexFilterReplace,regexFilterWith"/>
    </f:optionalBlock>

    <f:optionalBlock name="showFilters" title="${%Show current renaming filters}">
      <f:entry>
        <j:forEach var="cur" items="${descriptor.regexMap}">
          <f:entry>
            Key: ${cur.key}
            <br/>
            Value: ${cur.value}
            <input type="hidden" name="curKey" value="${cur.key}"/>
            <input type="hidden" name="curVal" value="${cur.value}"/>
          </f:entry>
          <f:entry>
            <f:validateButton title="Remove" method="removeRenameFilter" with="curKey,curVal"/>
          </f:entry>
        </j:forEach>
      </f:entry>
    </f:optionalBlock>

    <!--<f:optionalBlock name="oBlock" title="${%Option}">-->
      <!--<f:entry>-->
        <!--<f:repeatable name="xRepeat" var="i" items="${it.regexSearchReplace}" minimum="1" varStatus="xBlock">-->
          <!--<j:set var="y" value="Mason"/>-->
          <!--<br/><br/>-->
          <!--Key: <f:textbox name="curKey" value="${i.key}"/>-->
          <!--Value: <f:textbox name="curVal" value="${i.value}"/>-->
          <!--<br/><br/>-->
          <!--<div align="right"><input type="button" value="${%Delete}" class="repeatable-delete"/></div>-->
          <!--<br/><br/>-->
        <!--</f:repeatable>-->
      <!--</f:entry>-->
    <!--</f:optionalBlock>-->

    <f:optionalBlock title="option">
      <f:entry>
        <f:repeatable var="cur" items="${instance.regexSearchReplace}">
          <table width="100%">
            <f:entry title="${%Key}">
              <f:textbox name="curKey" field="curKey" value="${cur.key}"/>
            </f:entry>
            <f:entry title="${%Value}">
              <f:textbox name="curVal" field="curVal" value="${cur.value}"/>
            </f:entry>
            <f:entry title="">
              <div align="right">
                <f:repeatableDeleteButton/>
              </div>
            </f:entry>
          </table>
        </f:repeatable>
      </f:entry>
    </f:optionalBlock>





























































      <!--<f:optionalBlock name="showRename" title="${%Show current naming filters}">-->
        <!--<f:entry>-->
          <!--<j:invoke on="${it}" method="getRegexMap" var="rMap"/>-->
          <!--${rMap}-->
          <!--<j:forEach items="${rMap}" var="i">-->
            <!--Key:<f:textbox field="key" value="${i.key}"/>-->
            <!--Value:<f:textbox field="val" value="${i.value}"/>-->
            <!--<f:validateButton title="Delete" method="removeRenameFilter" with="${i.key}"/>-->
          <!--</j:forEach>-->
        <!--</f:entry>-->
      <!--</f:optionalBlock>-->






















    <!--<f:optionalBlock name="usenewnickname" title="${%Rename jobs for the view}">-->
      <!--<j:invoke method="getJobMap" on="${it}" var="jobMap"/>-->
      <!--<j:invoke method="descNicknameMap" on="${it}"/>-->
      <!--<j:forEach items="${h.getAllTopLevelItems(it.ownerItemGroup)}" var="job" indexVar="i">-->
        <!--<f:entry title="${job.name}">-->
          <!--<j:invoke method="findValue" on="${it}" var="val">-->
            <!--<j:arg type="hudson.model.Job" value="${job}"/>-->
          <!--</j:invoke>-->
          <!--<f:textbox field="nickname" value="${val}"/>-->
          <!--<input type="hidden" name="jobName" value="${job.name}"/>-->
          <!--<f:validateButton method="addNickname" title="Rename" with="nickname,jobName"/>-->
        <!--</f:entry>-->
      <!--</j:forEach>-->
    <!--</f:optionalBlock>-->

    <f:optionalBlock name="useincluderegex" title="${%Use a regular expression to include jobs into the view}"
                     checked="${it.includeRegex != null}" help="/help/view-config/includeregex.html">
      <f:entry title="${%Regular expression}">
        <f:textbox name="includeRegex" field="includeRegex" />
      </f:entry>
    </f:optionalBlock>

    <j:if test="${it.hasJobFilterExtensions()}">
      <f:block>
        <f:repeatableHeteroProperty field="jobFilters" hasHeader="true" addCaption="${%Add Job Filter}" />
      </f:block>
    </j:if>

  </f:section>

  <!-- END cut'n'paste from https://github.com/jenkinsci/jenkins/blob/jenkins-1.532/core/src/main/resources/hudson/model/ListView/configure-entries.jelly -->

  <f:section title="${%Build Monitor - View Settings}">

    <f:entry title="${%Title}">
      <f:textbox name="title" value="${it.title}"/>
    </f:entry>

    <f:entry title="${%Ordered by}">
      <select name="order" class="setting-input">
        <f:option value="ByName" selected='${it.currentOrder()=="ByName"}'>${%Name}</f:option>
        <f:option value="ByDisplayName" selected="${it.currentOrder()=='ByDisplayName'}">${%Display name}</f:option>
        <f:option value="ByFullName" selected="${it.currentOrder()=='ByFullName'}">${%Full name}</f:option>
        <f:option value="ByStatus" selected="${it.currentOrder()=='ByStatus'}">${%Status}</f:option>
        <f:option value="ByLastBuildTime" selected="${it.currentOrder()=='ByLastBuildTime'}">${%Last build time}</f:option>
        <f:option value="ByEstimatedDuration" selected="${it.currentOrder()=='ByEstimatedDuration'}">${%Estimated duration}</f:option>
      </select>
    </f:entry>

  </f:section>

  <f:section title="${%Build Monitor - Widget Settings}">

    <f:entry title="${%Display committers}" help="${descriptor.getHelpFile('displayCommitters')}">
      <f:checkbox id="displayCommitters" field="displayCommitters" />
    </f:entry>

  </f:section>

  <script>
    (function() {
      Behaviour.specify("#recurse", 'ListView', 0, function(e) {
        var nestedElements = $$('SPAN.nested')
        e.onclick = function() {
          nestedElements.each(function(el) {
            e.checked ? el.show() : el.hide();
          });
        }
      });
    }());
  </script>

</j:jelly>